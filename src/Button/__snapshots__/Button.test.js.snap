// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Button Snapshots should render a Button 1`] = `
<View
  accessibilityComponentType={undefined}
  accessibilityLabel=""
  accessibilityTraits={
    Array [
      "button",
    ]
  }
  accessible={true}
  collapsable={undefined}
  hitSlop={undefined}
  isTVSelectable={true}
  nativeID={undefined}
  onLayout={undefined}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Object {
      "opacity": 1,
    }
  }
  testID={undefined}
  tvParallaxProperties={undefined}
>
  <View
    style={
      Object {
        "alignItems": "center",
        "flexDirection": "row",
        "justifyContent": "center",
        "padding": 8,
      }
    }
  >
    <Text
      accessible={true}
      allowFontScaling={true}
      disabled={false}
      ellipsizeMode="tail"
      style={
        Object {
          "color": "#007AFF",
          "fontSize": 18,
          "textAlign": "center",
        }
      }
    >
      
    </Text>
  </View>
</View>
`;

exports[`Button Snapshots should render a Button block 1`] = `
<View
  accessibilityComponentType={undefined}
  accessibilityLabel=""
  accessibilityTraits={
    Array [
      "button",
    ]
  }
  accessible={true}
  collapsable={undefined}
  hitSlop={undefined}
  isTVSelectable={true}
  nativeID={undefined}
  onLayout={undefined}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Object {
      "opacity": 1,
    }
  }
  testID={undefined}
  tvParallaxProperties={undefined}
>
  <View
    style={
      Object {
        "alignItems": "center",
        "flexDirection": "row",
        "justifyContent": "center",
        "padding": 8,
        "width": "100%",
      }
    }
  >
    <Text
      accessible={true}
      allowFontScaling={true}
      disabled={false}
      ellipsizeMode="tail"
      style={
        Object {
          "color": "#007AFF",
          "fontSize": 18,
          "textAlign": "center",
        }
      }
    >
      BLOCK
    </Text>
  </View>
</View>
`;

exports[`Button Snapshots should render a Button disabled 1`] = `
<View
  accessibilityComponentType={undefined}
  accessibilityLabel=""
  accessibilityTraits={
    Array [
      "button",
    ]
  }
  accessible={true}
  collapsable={undefined}
  hitSlop={undefined}
  isTVSelectable={true}
  nativeID={undefined}
  onLayout={undefined}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Object {
      "opacity": 1,
    }
  }
  testID={undefined}
  tvParallaxProperties={undefined}
>
  <View
    style={
      Object {
        "alignItems": "center",
        "flexDirection": "row",
        "justifyContent": "center",
        "padding": 8,
      }
    }
  >
    <Text
      accessible={true}
      allowFontScaling={true}
      disabled={true}
      ellipsizeMode="tail"
      style={
        Object {
          "color": "#007AFF",
          "fontSize": 18,
          "textAlign": "center",
        }
      }
    >
      DISABLED
    </Text>
  </View>
</View>
`;

exports[`Button Snapshots should render a Button with a left icon 1`] = `
<View
  accessibilityComponentType={undefined}
  accessibilityLabel=""
  accessibilityTraits={
    Array [
      "button",
    ]
  }
  accessible={true}
  collapsable={undefined}
  hitSlop={undefined}
  isTVSelectable={true}
  nativeID={undefined}
  onLayout={undefined}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Object {
      "opacity": 1,
    }
  }
  testID={undefined}
  tvParallaxProperties={undefined}
>
  <View
    style={
      Object {
        "alignItems": "center",
        "backgroundColor": "transparent",
        "borderRadius": 20,
        "elevation": 0,
        "flexDirection": "row",
        "height": 40,
        "justifyContent": "center",
        "padding": 8,
        "width": 40,
      }
    }
  >
    <View
      style={
        Object {
          "alignItems": "center",
          "flexDirection": "row",
          "justifyContent": "center",
        }
      }
    >
      <Text
        accessible={true}
        allowFontScaling={false}
        ellipsizeMode="tail"
        style={
          Array [
            Object {
              "color": "black",
              "fontSize": 18,
            },
            undefined,
            Object {
              "fontFamily": "Ionicons",
              "fontStyle": "normal",
              "fontWeight": "normal",
            },
          ]
        }
      >
        
      </Text>
      <Text
        accessible={true}
        allowFontScaling={true}
        disabled={false}
        ellipsizeMode="tail"
        style={
          Array [
            Object {
              "color": "black",
              "fontSize": 18,
              "textAlign": "center",
            },
            Object {
              "marginLeft": 6,
            },
          ]
        }
      >
        LOGIN
      </Text>
    </View>
  </View>
</View>
`;

exports[`Button Snapshots should render a Button with a right button 1`] = `
<View
  accessibilityComponentType={undefined}
  accessibilityLabel=""
  accessibilityTraits={
    Array [
      "button",
    ]
  }
  accessible={true}
  collapsable={undefined}
  hitSlop={undefined}
  isTVSelectable={true}
  nativeID={undefined}
  onLayout={undefined}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Object {
      "opacity": 1,
    }
  }
  testID={undefined}
  tvParallaxProperties={undefined}
>
  <View
    style={
      Object {
        "alignItems": "center",
        "backgroundColor": "transparent",
        "borderRadius": 20,
        "elevation": 0,
        "flexDirection": "row",
        "height": 40,
        "justifyContent": "center",
        "padding": 8,
        "width": 40,
      }
    }
  >
    <View
      style={
        Object {
          "alignItems": "center",
          "flexDirection": "row",
          "justifyContent": "center",
        }
      }
    >
      <Text
        accessible={true}
        allowFontScaling={true}
        disabled={false}
        ellipsizeMode="tail"
        style={
          Array [
            Object {
              "color": "black",
              "fontSize": 18,
              "textAlign": "center",
            },
            Object {
              "marginRight": 6,
            },
          ]
        }
      >
        LOGIN
      </Text>
      <Text
        accessible={true}
        allowFontScaling={false}
        ellipsizeMode="tail"
        style={
          Array [
            Object {
              "color": "black",
              "fontSize": 18,
            },
            undefined,
            Object {
              "fontFamily": "Ionicons",
              "fontStyle": "normal",
              "fontWeight": "normal",
            },
          ]
        }
      >
        
      </Text>
    </View>
  </View>
</View>
`;

exports[`Button Snapshots should render a Button with a spinner 1`] = `
<View
  accessibilityComponentType={undefined}
  accessibilityLabel=""
  accessibilityTraits={
    Array [
      "button",
    ]
  }
  accessible={true}
  collapsable={undefined}
  hitSlop={undefined}
  isTVSelectable={true}
  nativeID={undefined}
  onLayout={undefined}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Object {
      "opacity": 1,
    }
  }
  testID={undefined}
  tvParallaxProperties={undefined}
>
  <View
    style={
      Object {
        "alignItems": "center",
        "backgroundColor": "transparent",
        "borderRadius": 20,
        "elevation": 0,
        "flexDirection": "row",
        "height": 40,
        "justifyContent": "center",
        "padding": 8,
        "width": 40,
      }
    }
  >
    <View
      style={
        Object {
          "alignItems": "center",
          "flexDirection": "row",
          "justifyContent": "center",
        }
      }
    >
      <ActivityIndicator
        animating={true}
        color="black"
        hidesWhenStopped={true}
        size="small"
      />
    </View>
  </View>
</View>
`;

exports[`Button Snapshots should render a Button with a spinner and text 1`] = `
<View
  accessibilityComponentType={undefined}
  accessibilityLabel=""
  accessibilityTraits={
    Array [
      "button",
    ]
  }
  accessible={true}
  collapsable={undefined}
  hitSlop={undefined}
  isTVSelectable={true}
  nativeID={undefined}
  onLayout={undefined}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Object {
      "opacity": 1,
    }
  }
  testID={undefined}
  tvParallaxProperties={undefined}
>
  <View
    style={
      Object {
        "alignItems": "center",
        "backgroundColor": "transparent",
        "borderRadius": 20,
        "elevation": 0,
        "flexDirection": "row",
        "height": 40,
        "justifyContent": "center",
        "padding": 8,
        "width": 40,
      }
    }
  >
    <View
      style={
        Object {
          "alignItems": "center",
          "flexDirection": "row",
          "justifyContent": "center",
        }
      }
    >
      <ActivityIndicator
        animating={true}
        color="black"
        hidesWhenStopped={true}
        size="small"
      />
      <Text
        accessible={true}
        allowFontScaling={true}
        ellipsizeMode="tail"
        style={
          Array [
            Object {
              "color": "black",
              "fontSize": 18,
              "textAlign": "center",
            },
            Object {
              "marginLeft": 6,
            },
          ]
        }
      >
        LOADING...
      </Text>
    </View>
  </View>
</View>
`;

exports[`Button Snapshots should render a Button with custom styles 1`] = `
<View
  accessibilityComponentType={undefined}
  accessibilityLabel=""
  accessibilityTraits={
    Array [
      "button",
    ]
  }
  accessible={true}
  collapsable={undefined}
  hitSlop={undefined}
  isTVSelectable={true}
  nativeID={undefined}
  onLayout={undefined}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Object {
      "opacity": 1,
    }
  }
  testID={undefined}
  tvParallaxProperties={undefined}
>
  <View
    style={
      Object {
        "alignItems": "center",
        "backgroundColor": "#FF0000",
        "flexDirection": "row",
        "justifyContent": "center",
        "padding": 8,
      }
    }
  >
    <Text
      accessible={true}
      allowFontScaling={true}
      disabled={false}
      ellipsizeMode="tail"
      style={
        Object {
          "color": "#007AFF",
          "fontSize": 18,
          "textAlign": "center",
        }
      }
    >
      STYLED
    </Text>
  </View>
</View>
`;

exports[`Button Snapshots should render a outline Button 1`] = `
<View
  accessibilityComponentType={undefined}
  accessibilityLabel=""
  accessibilityTraits={
    Array [
      "button",
    ]
  }
  accessible={true}
  collapsable={undefined}
  hitSlop={undefined}
  isTVSelectable={true}
  nativeID={undefined}
  onLayout={undefined}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Object {
      "opacity": 1,
    }
  }
  testID={undefined}
  tvParallaxProperties={undefined}
>
  <View
    style={
      Object {
        "alignItems": "center",
        "backgroundColor": "transparent",
        "borderRadius": 20,
        "elevation": 1,
        "flexDirection": "row",
        "height": 40,
        "justifyContent": "center",
        "padding": 8,
        "width": 40,
      }
    }
  >
    <Text
      accessible={true}
      allowFontScaling={true}
      disabled={false}
      ellipsizeMode="tail"
      style={
        Object {
          "color": "black",
          "fontSize": 18,
          "textAlign": "center",
        }
      }
    >
      OUTLINE
    </Text>
  </View>
</View>
`;

exports[`Button Snapshots should render a rounded Button 1`] = `
<View
  accessibilityComponentType={undefined}
  accessibilityLabel=""
  accessibilityTraits={
    Array [
      "button",
    ]
  }
  accessible={true}
  collapsable={undefined}
  hitSlop={undefined}
  isTVSelectable={true}
  nativeID={undefined}
  onLayout={undefined}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Object {
      "opacity": 1,
    }
  }
  testID={undefined}
  tvParallaxProperties={undefined}
>
  <View
    style={
      Object {
        "alignItems": "center",
        "backgroundColor": "transparent",
        "borderRadius": 20,
        "elevation": 0,
        "flexDirection": "row",
        "height": 40,
        "justifyContent": "center",
        "padding": 8,
        "width": 40,
      }
    }
  >
    <View
      style={
        Object {
          "padding": undefined,
        }
      }
    >
      <Text
        accessible={true}
        allowFontScaling={false}
        ellipsizeMode="tail"
        style={
          Array [
            Object {
              "color": "black",
              "fontSize": 18,
            },
            undefined,
            Object {
              "fontFamily": "Ionicons",
              "fontStyle": "normal",
              "fontWeight": "normal",
            },
          ]
        }
      >
        
      </Text>
    </View>
  </View>
</View>
`;

exports[`Button Snapshots should render a transparent Button 1`] = `
<View
  accessibilityComponentType={undefined}
  accessibilityLabel=""
  accessibilityTraits={
    Array [
      "button",
    ]
  }
  accessible={true}
  collapsable={undefined}
  hitSlop={undefined}
  isTVSelectable={true}
  nativeID={undefined}
  onLayout={undefined}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Object {
      "opacity": 1,
    }
  }
  testID={undefined}
  tvParallaxProperties={undefined}
>
  <View
    style={
      Object {
        "alignItems": "center",
        "backgroundColor": "transparent",
        "elevation": 0,
        "flexDirection": "row",
        "justifyContent": "center",
        "padding": 8,
        "width": "100%",
      }
    }
  >
    <Text
      accessible={true}
      allowFontScaling={true}
      disabled={false}
      ellipsizeMode="tail"
      style={
        Object {
          "color": "black",
          "fontSize": 18,
          "textAlign": "center",
        }
      }
    >
      TRANSPARENT
    </Text>
  </View>
</View>
`;

exports[`Button Snapshots should render an icon Button 1`] = `
<View
  accessibilityComponentType={undefined}
  accessibilityLabel=""
  accessibilityTraits={
    Array [
      "button",
    ]
  }
  accessible={true}
  collapsable={undefined}
  hitSlop={undefined}
  isTVSelectable={true}
  nativeID={undefined}
  onLayout={undefined}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Object {
      "opacity": 1,
    }
  }
  testID={undefined}
  tvParallaxProperties={undefined}
>
  <View
    style={
      Object {
        "alignItems": "center",
        "backgroundColor": "transparent",
        "borderRadius": 20,
        "elevation": 0,
        "flexDirection": "row",
        "height": 40,
        "justifyContent": "center",
        "padding": 8,
        "width": 40,
      }
    }
  >
    <View
      style={
        Object {
          "padding": undefined,
        }
      }
    >
      <Text
        accessible={true}
        allowFontScaling={false}
        ellipsizeMode="tail"
        style={
          Array [
            Object {
              "color": "black",
              "fontSize": 18,
            },
            undefined,
            Object {
              "fontFamily": "Ionicons",
              "fontStyle": "normal",
              "fontWeight": "normal",
            },
          ]
        }
      >
        
      </Text>
    </View>
  </View>
</View>
`;
